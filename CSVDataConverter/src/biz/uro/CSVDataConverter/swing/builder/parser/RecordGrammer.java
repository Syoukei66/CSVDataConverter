/* Generated By:JavaCC: Do not edit this line. RecordGrammer.java */
package biz.uro.CSVDataConverter.swing.builder.parser;

import java.util.ArrayList;
import biz.uro.CSVDataConverter.database.Record;
import biz.uro.CSVDataConverter.database.Table;
import biz.uro.CSVDataConverter.database.element.ElementValue;
import org.apache.commons.lang3.StringUtils;

public class RecordGrammer implements RecordGrammerConstants {
        public String parseRecord( Table table, Record record ) {
                try {
                        return script( record );
                }
                catch ( RuntimeException e1 ) {
                        final RuntimeException e12 = new RuntimeException( table.getName() + "=>" + jj_input_stream.GetImage() + "\u005cn" + e1.toString() + "\u005cn" + e1.getMessage() + "\u005cn" + e1.getCause() );
                        e12.setStackTrace( e1.getStackTrace() );
                        throw e12;
                }
                catch ( ParseException e2 ) {
                        final RuntimeException e22 = new RuntimeException( table.getName() + "=>" + jj_input_stream.GetImage() + "\u005cn" + e2.toString() + "\u005cn" + e2.getMessage() + "\u005cn" + e2.getCause() );
                        e22.setStackTrace( e2.getStackTrace() );
                        throw e22;
                }
        }

  final public String script(Record record) throws ParseException {
        Token token;
        String base;
        Object obj;
        ArrayList<Object> args = new ArrayList<Object>();
    token = jj_consume_token(STRING);
                base = StringUtils.remove( token.image, "\u005c"" );
    jj_consume_token(COLON);
    obj = value(record);
                args.add( obj );
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COLON);
      obj = value(record);
                        args.add( obj );
    }
    jj_consume_token(0);
                {if (true) return String.format( base, args.toArray() );}
    throw new Error("Missing return statement in function");
  }

  final public Object value(Record record) throws ParseException {
        Token token;
        ElementValue elementValue;
        int index;
    jj_consume_token(HEAD);
    elementValue = elementValue(record);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USETOKEN:
        jj_consume_token(USETOKEN);
        jj_consume_token(LPAREN);
        token = jj_consume_token(NUMBER);
                                index = Integer.parseInt( token.image );
        jj_consume_token(RPAREN);
                                {if (true) return elementValue.getUseToken( index );}
        break;
      case TOSTRING:
        jj_consume_token(TOSTRING);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
                                {if (true) return elementValue.toString();}
        break;
      case PROGRAM:
        jj_consume_token(PROGRAM);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
                                {if (true) return elementValue.getProgram();}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                {if (true) return elementValue.getValue();}
    throw new Error("Missing return statement in function");
  }

  final public ElementValue elementValue(Record record) throws ParseException {
        RecordPointer ret;
        RecordPointer next;
    ret = pointer();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      next = pointer();
                        ret.next( next );
    }
                {if (true) return ret.getElementValue( record );}
    throw new Error("Missing return statement in function");
  }

  final public RecordPointer pointer() throws ParseException {
        int index;
    token = jj_consume_token(NUMBER);
    index = index();
                {if (true) return new RecordPointer( Integer.parseInt( token.image ), index );}
    throw new Error("Missing return statement in function");
  }

  final public int index() throws ParseException {
        int ret;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      token = jj_consume_token(NUMBER);
                        ret = Integer.parseInt( token.image );
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[4] = jj_gen;
                        ret = 0;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RecordGrammerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0xe0,0x100,0x100,0x1000,};
   }

  /** Constructor with InputStream. */
  public RecordGrammer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RecordGrammer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RecordGrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RecordGrammer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RecordGrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RecordGrammer(RecordGrammerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RecordGrammerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
